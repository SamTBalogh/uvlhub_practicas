name: Codacy CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.10', '3.11', '3.12' ]

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: uvlhub_root_password
          MYSQL_DATABASE: uvlhubdb_test
          MYSQL_USER: uvlhub_user
          MYSQL_PASSWORD: uvlhub_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Solo en 3.12 para no duplicar avisos
    - name: Check for outdated dependencies
      if: matrix.python-version == '3.12'
      run: |
        python - <<'PY'
        import json, subprocess, os, sys
        out = subprocess.check_output([sys.executable, "-m", "pip", "list", "--outdated", "--format=json"])
        pkgs = json.loads(out.decode())
        summary_path = os.environ.get("GITHUB_STEP_SUMMARY")
        lines = []
        if pkgs:
            print(f"{len(pkgs)} dependencias desactualizadas encontradas:")
            for p in pkgs:
                print(f"::warning title=Outdated dependency::{p['name']} {p['version']} -> {p['latest_version']} (latest: {p.get('latest_filetype','?')})")
            lines.append("### Dependencias desactualizadas\n")
            lines.append("| Paquete | Versión instalada | Última versión | Tipo |\n")
            lines.append("|---|---:|---:|---|\n")
            for p in pkgs:
                lines.append(f"| {p['name']} | {p['version']} | {p['latest_version']} | {p.get('latest_filetype','-')} |\n")
        else:
            print("No se han encontrado dependencias desactualizadas.")
            lines.append("No se han encontrado dependencias desactualizadas.\n")
        if summary_path:
            with open(summary_path, "a", encoding="utf-8") as f:
                f.writelines(lines)
        PY

    # Tests en todas las versiones para compatibilidad
    - name: Run tests (no coverage)
      if: matrix.python-version != '3.12'
      env:
        FLASK_ENV: testing
        MARIADB_HOSTNAME: 127.0.0.1
        MARIADB_PORT: 3306
        MARIADB_TEST_DATABASE: uvlhubdb_test
        MARIADB_USER: uvlhub_user
        MARIADB_PASSWORD: uvlhub_password
      run: |
        pytest app/modules/ --ignore-glob='*selenium*' -q

    # Solo en 3.12: cobertura + Codacy
    - name: Coverage & upload to Codacy (3.12 only)
      if: matrix.python-version == '3.12'
      env:
        FLASK_ENV: testing
        MARIADB_HOSTNAME: 127.0.0.1
        MARIADB_PORT: 3306
        MARIADB_TEST_DATABASE: uvlhubdb_test
        MARIADB_USER: uvlhub_user
        MARIADB_PASSWORD: uvlhub_password
        CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
      run: |
        pip install codacy-coverage
        coverage run -m pytest app/modules/ --ignore-glob='*selenium*'
        coverage xml
        python-codacy-coverage -r coverage.xml

    - name: Security audit with pip-audit (stdout -> summary)
      if: matrix.python-version == '3.12'
      continue-on-error: true
      run: |
        pip install pip-audit
        python - <<'PY'
        import json, os, subprocess

        def load_results():
            # Ejecuta pip-audit y captura JSON por stdout
            result = subprocess.run(
                ["pip-audit", "-f", "json", "--progress-spinner", "off"],
                check=False, capture_output=True, text=True
            )
            raw = (result.stdout or "").strip()
            if not raw:
                return []
            try:
                data = json.loads(raw)
            except json.JSONDecodeError:
                return []
            # Soportar ambos formatos:
            # 1) Lista de dependencias
            # 2) Objeto {"dependencies": [...], ...}
            if isinstance(data, dict):
                return data.get("dependencies", [])
            if isinstance(data, list):
                return data
            return []

        deps = load_results()
        # Filtra solo dependencias con vulnerabilidades
        vulns = [d for d in deps if isinstance(d, dict) and d.get("vulns")]

        summary_path = os.environ.get("GITHUB_STEP_SUMMARY")
        lines = []
        if vulns:
            total = sum(len(d["vulns"]) for d in vulns)
            lines.append(f"### pip-audit: {total} vulnerabilidades detectadas en {len(vulns)} paquetes\n")
            lines.append("| Paquete | Versión | Vulnerabilidad | Severidad | ID |\n")
            lines.append("|---|---:|---|---|---|\n")
            for dep in vulns:
                name = dep.get("name","-"); version = dep.get("version","-")
                for v in dep.get("vulns", []):
                    desc = (v.get("description") or "-").splitlines()[0][:80]
                    lines.append(f"| {name} | {version} | {desc} | {v.get('severity','-')} | {v.get('id','-')} |\n")
        else:
            lines.append("pip-audit: no se han encontrado vulnerabilidades.\n")

        if summary_path:
            with open(summary_path, "a", encoding="utf-8") as f:
                f.writelines(lines)
        PY
